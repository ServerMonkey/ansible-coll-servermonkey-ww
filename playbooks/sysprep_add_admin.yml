---
#info: Login as factory user, add a new admin user, then disable factory user

# save current credentials to variables
# runs as normal ansible user on localhost, even if the user does not exist yet
- hosts: all
  gather_facts: false
  strategy: free
  become: false

  tasks:
    - block:
        - name: Host has no credentials
          debug:
            msg: "Skip, no factory credentials defined"

        - name: Skip host
          meta: end_host
      when: >
        im_factory_user is undefined
        or im_factory_password is undefined
        or ansible_user is undefined
        or ansible_password is undefined

    - name: Get admin user
      connection: local
      vars:
        ansible_python_interpreter: "{{ ansible_playbook_python }}"
      shell: echo '{{ ansible_user }}'
      register: new_admin_user
      changed_when: false

    - name: Get admin user password
      connection: local
      vars:
        ansible_python_interpreter: "{{ ansible_playbook_python }}"
      shell: echo '{{ ansible_password }}'
      register: new_admin_pass
      changed_when: false

# run as factory user and add a new sudo user
- hosts: all
  gather_facts: false
  strategy: free
  become: true
  vars:
    ansible_user: '{{ im_factory_user }}'
    ansible_password: '{{ im_factory_password }}'
    ansible_become_password: '{{ im_factory_password }}'

  tasks:
    - block:
        - name: Skip host
          meta: end_host
      when: >
        im_factory_user is undefined
        or im_factory_password is undefined
        or ansible_user is undefined
        or ansible_password is undefined

    - name: Check SSH superuser access
      wait_for_connection:
        timeout: 3
      failed_when: false
      register: test_ssh_superuser

    - name: Info
      debug:
        msg: "factory user is already disabled"
      when: test_ssh_superuser.msg is defined

    # Detect OS
    - block:
        - name: Detect OS
          shell: |
            if [ -n "$(command -v systeminfo)" ]; then
                echo "windows"
            else
                echo "posix"
            fi
          register: os_type

        - debug:
            msg: "{{ os_type.stdout }}"
      when: test_ssh_superuser.msg is undefined

    # Posix
    - block:
        - name: Add new admin user
          user:
            name: '{{ new_admin_user.stdout }}'
            group: sudo
            shell: /bin/bash
            password: "{{ new_admin_pass.stdout | password_hash('sha512') }}"

        - name: Disable factory user
          user:
            name: '{{ im_factory_user }}'
            password: '!'
      when:
        - test_ssh_superuser.msg is undefined
        - os_type.stdout == "posix"

    # Windows
    - block:
        - name: Add new local admin and disable factory user (Windows)
          shell: |
            # remove useless settings
            rm -f /etc/passwd || exit 1
            rm -f /etc/group || exit 1
            # set correct file permissions
            find "/home/{{ im_factory_user }}" -type d -exec chmod 770 {} + || exit 1
            find "/home/{{ im_factory_user }}" -type f -exec chmod 660 {} + || exit 1
            #
            # remove old bash history as a security measure
            rm -f "/home/{{ im_factory_user }}/.bash_history" || exit 1
            #
            # add new user
            net user {{ new_admin_user.stdout }} {{ new_admin_pass.stdout }} /add || exit 1
            net localgroup Administrators {{ new_admin_user.stdout }} /add || exit 1
            #
            # copy shell profile
            cp -R  "/home/{{ im_factory_user }}" "/home/{{ new_admin_user.stdout }}" || exit 1
            chown -R {{ new_admin_user.stdout }} "/home/{{ new_admin_user.stdout }}" || exit 1
            #
            # disable factory user
            net user {{ im_factory_user }} /active:no || exit 1
            #
            # create user profile files
            systeminfo 1>/dev/null 2>&1 || exit 1
            #
            # disable autologin
            regtool set "\HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\AutoAdminLogon" 0 || exit 1
            regtool set "\HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultUserName" "" || exit 1
            regtool set "\HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultPassword" "" || exit 1
            logoff console
          register: add_admin_user
          failed_when: '"completed successfully" not in add_admin_user.stdout'
      when:
        - test_ssh_superuser.msg is undefined
        - os_type.stdout == "windows"